// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(uuid()) 
  email             String?    @unique
  mobileNumber      String
  isMobileVerified  Boolean   @default(false)   
  password          String?
  isGoogleUser      Boolean   @default(false)    
  isEmailVerified   Boolean   @default(false)
  isAdmin           Boolean   @default(false)
  loginPin          String?
  firstName        String?
  countryCode       String?     @default("234")
  lastName         String?
  afripayTag        String?    @unique
  transactionPin    String? 
  profilePicture   String?
  bvn             String?
  nationalIdCardUrl    String?
  role    Role   @default(USER)
  token             Token?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  wallet Wallet?
  beneficiaries     Wallet[]  @relation("beneficiaries")
}

model Token {
  id                      String    @id @default(uuid())
  account                 Account      @relation(fields: [accountId], references: [id])  
  accountId               String    @unique
  token                   String
  createdAt               DateTime  @default(now())
}

enum Role {
  ADMIN
  USER
}

model Wallet{
  id              String      @id @default(uuid())
  account         Account     @relation( fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  email            String      @unique
  virualAccount VirtualAccount?   
  virtualCard   VirtualCard?
  balance         Float       @default(0)
  createdAt       DateTime  @default(now())
  afripayTag        String?
  updatedAt DateTime    @updatedAt
  accountBeneficiaries Account[] @relation("beneficiaries")
}

model VirtualAccount {
  id              String      @id @default(uuid())
  wallet         Wallet     @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  email           String      @unique
  accountNumber   String      @unique
  bankName    String
  transactionRef   String
  flwRef        String
  createdAt       DateTime  @default(now())
}

model VirtualCard {
  id              String      @id @default(uuid())
  wallet         Wallet     @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  email           String      @unique
  currency   Currency  @default(NGN)
  firstName        String
  lastName         String
  phone           String
  cardType        String
  expiration      String
  cvv             String
  cardId          String
  cardPan         String
  transactionRef   String?
  isActive        Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Currency {
  NGN
  USD
}